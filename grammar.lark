// DeltaQL Language Grammar Definition

?start: program

program: statement*

?statement: var_decl
          | assignment
          | function_def
          | if_stmt
          | for_stmt
          | return_stmt
          | expr_stmt

// Variable declaration
var_decl: "var" NAME "=" expr

// Assignment
assignment: NAME "=" expr

// Function definition
function_def: "function" NAME "(" parameters? ")" "{" statement* "}"
parameters: NAME ("," NAME)*

// Control flow
if_stmt: "if" expr "{" statement* "}" ("else" "{" statement* "}")?
for_stmt: "for" NAME "in" expr "{" statement* "}"

// Return statement
return_stmt: "return" expr?

// Expression statement (function call, etc.)
expr_stmt: expr

// Expressions
?expr: logical_or

?logical_or: logical_and ("or" logical_and)*
?logical_and: comparison ("and" comparison)*

?comparison: addition (COMP_OP addition)*
COMP_OP: "==" | "!=" | "<=" | ">=" | "<" | ">"

?addition: multiplication (ADD_OP multiplication)*
ADD_OP: "+" | "-"

?multiplication: unary (MUL_OP unary)*
MUL_OP: "*" | "/"

?unary: "not" unary
      | "-" unary
      | postfix

?postfix: atom ("[" expr "]")*

?atom: NUMBER           -> number
     | STRING           -> string
     | "true"           -> true
     | "false"          -> false
     | NAME             -> identifier
     | list_literal
     | function_call
     | "(" expr ")"

// Function call
function_call: NAME "(" arguments? ")"
arguments: expr ("," expr)*

// List literal
list_literal: "[" (expr ("," expr)*)? "]"

// Tokens
NUMBER: /\d+(\.\d+)?/
STRING: /"([^"\\]|\\.)*"/ | /'([^'\\]|\\.)*'/
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

// Ignore whitespace and comments
%import common.WS
%ignore WS

COMMENT: "//" /[^\n]*/
%ignore COMMENT

